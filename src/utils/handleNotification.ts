import AsyncStorage from '@react-native-async-storage/async-storage';
import auth from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';
import messing from '@react-native-firebase/messaging';
import {Doctor} from '../models/Doctor';
import {config} from '../constants/config';

const localhost = config.localhost;

export class HandleNotification {
  // Ki·ªÉm tra user c√≥ quy·ªÅn g·ª≠i nh·∫≠n th√¥ng b√°o kh√¥ng
  static checkNotificationPermission = async () => {
    // l·∫•y permission
    const authStatus = await messing().requestPermission();

    if (
      authStatus === messing.AuthorizationStatus.AUTHORIZED ||
      authStatus === messing.AuthorizationStatus.PROVISIONAL
    ) {
      this.getFcmToken();
    }
  };

  static getFcmToken = async () => {
    // l·∫•y tokent t·ª´ Storage
    await AsyncStorage.removeItem('fcmtoken');
    const fcmoken = await AsyncStorage.getItem('fcmtoken');

    if (!fcmoken) {
      const token = await messing().getToken();

      // N·∫øu l·∫•y ƒë∆∞·ª£c token th√¨ l∆∞u v√†o storage
      if (token) {
        await AsyncStorage.setItem('fcmtoken', token);
        // C·∫≠p nh·∫≠t token v√†o firestore
        this.updateToken(token);
      }
    }
  };

  // C·∫≠p nh·∫≠t token v√†o firestore
  static updateToken = async (token: string) => {
    const user = auth().currentUser;
    const doctorData = await firestore()
      .collection('doctors')
      .where('email', '==', user?.email)
      .get();

    if (!doctorData.empty) {
      const data: any = doctorData.docs[0].data();
      console.log(data);

      // n·∫øu data kh√¥ng c√≥ token th√¨ s·∫Ω c·∫≠p nh·∫≠t
      if (!data.tokens || !data.tokens.includes(token)) {
        await firestore().collection('doctors').doc(data.doctorId).update({
          //tokens: firestore.FieldValue.arrayUnion(token), // th√™m token v√†o m·∫£ng tokens
          tokens: token,
        });
      }
    }
  };

  // G·ª≠i th√¥ng b√°o t·ª´ doctor cho patient
  static sendNotificationDoctorToPatient = async ({
    senderId,
    name,
    receiverId,
    title,
    body,
    appointmentId,
  }: {
    senderId: string;
    name: string;
    receiverId: string;
    title: string;
    body: string;
    appointmentId: string;
  }) => {
    try {
      const response = await fetch(
        `http://${localhost}:3000/send-notification-doctor-to-patient`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            senderId,
            name,
            receiverId,
            appointmentId,
            title, // Ti√™u ƒë·ªÅ th√¥ng b√°o
            body, // N·ªôi dung th√¥ng b√°o
          }),
        },
      );

      if (!response.ok) {
        // Log l·ªói HTTP t·ª´ server (n·∫øu response kh√¥ng th√†nh c√¥ng)
        const errorResponse = await response.text();
        console.error(
          `L·ªói t·ª´ server: ${response.status} - ${response.statusText}`,
        );
        console.error('Chi ti·∫øt l·ªói t·ª´ server:', errorResponse);
        return;
      }

      const result = await response.json();
      console.log('Th√¥ng b√°o ƒë√£ g·ª≠i:', result);
    } catch (error: any) {
      // Log chi ti·∫øt l·ªói t·ª´ fetch
      console.log('-----------------------');
      console.error('Chi ti·∫øt l·ªói:', error);
    }
  };
}

export class HandleNotificationPatient {
  // Ki·ªÉm tra user c√≥ quy·ªÅn g·ª≠i nh·∫≠n th√¥ng b√°o kh√¥ng
  static checkNotificationPermission = async () => {
    // l·∫•y permission
    const authStatus = await messing().requestPermission();

    if (
      authStatus === messing.AuthorizationStatus.AUTHORIZED ||
      authStatus === messing.AuthorizationStatus.PROVISIONAL
    ) {
      this.getFcmToken();
    } else {
      console.log(
        'üöÄ ~ HandleNotificationPatient ~ checkNotificationPermission= ~  Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ph√©p',
      );
    }
  };

  static getFcmToken = async () => {
    // l·∫•y tokent t·ª´ Storage
    await AsyncStorage.removeItem('fcmTokenPatient');
    const fcmoken = await AsyncStorage.getItem('fcmTokenPatient');

    if (!fcmoken) {
      const token = await messing().getToken();

      if (token) {
        await AsyncStorage.setItem('fcmTokenPatient', token);

        this.updateToken(token);
      }
    }
  };

  // C·∫≠p nh·∫≠t token v√†o firestore
  static updateToken = async (token: string) => {
    const user = auth().currentUser;
    const patientData = await firestore()
      .collection('patients')
      .doc(user?.uid)
      .get();

    if (patientData.exists) {
      const data: any = patientData.data();

      // n·∫øu data kh√¥ng c√≥ token th√¨ s·∫Ω c·∫≠p nh·∫≠t
      if (!data.tokens || !data.tokens.includes(token)) {
        await firestore().collection('patients').doc(user?.uid).update({
          //tokens: firestore.FieldValue.arrayUnion(token), // th√™m token v√†o m·∫£ng tokens
          tokens: token,
        });
      }
    }
  };

  // G·ª≠i th√¥ng b√°o t·ª´ patient cho doctor
  static sendNotificationPatientToDoctor = async ({
    senderId,
    name,
    receiverId,
    title,
    body,
    appointmentId,
  }: {
    senderId: string;
    name: string;
    receiverId: string;
    title: string;
    body: string;
    appointmentId: string;
    }) => {
    
    try {
      const response = await fetch(
        `http://${localhost}:3000/send-notification-patient-to-doctor`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            senderId,
            name,
            receiverId,
            appointmentId,
            title, // Ti√™u ƒë·ªÅ th√¥ng b√°o
            body, // N·ªôi dung th√¥ng b√°o
          }),
        },
      );
      // Log response status v√† URL
      console.log(
        'Request URL:',
        `http://${localhost}:3000/send-notification-patient-to-doctor`,
      );
      console.log('Response status:', response.status);

      if (!response.ok) {
        // Log l·ªói HTTP t·ª´ server (n·∫øu response kh√¥ng th√†nh c√¥ng)
        const errorResponse = await response.text();
        console.error(
          `L·ªói t·ª´ server: ${response.status} - ${response.statusText}`,
        );
        console.error('Chi ti·∫øt l·ªói t·ª´ server:', errorResponse);
        return;
      }

      const result = await response.json();
      console.log('Th√¥ng b√°o ƒë√£ g·ª≠i:', result);
    } catch (error: any) {
      // Log chi ti·∫øt l·ªói t·ª´ fetch
      console.error('Error sending notification:', {
        message: error.message,
        stack: error.stack,
        // N·∫øu l√† network error, log th√™m th√¥ng tin
        networkError: error.cause,
      });
    }
  };
}
